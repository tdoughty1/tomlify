from datetime import timedelta, timezone
import math

import pytest

from tomlify.utils import parse_date_time, parse_string
from tomlify.values import (
    BasicString,
    Boolean, 
    DateTime, 
    Float, 
    Integer, 
    LiteralString,
    LocalDate, 
    LocalDateTime, 
    LocalTime,
    MultilineBasicString,
    MultilineLiteralString,
)


def test_valid_string_basic_escape() -> None:
    input_string = '''"I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."'''
    output_string = '''"I'm a string. \"You can quote me\". Name\tJos\u00E9\nLocation\tSF."'''
    actual_output = parse_string(input_string)
    expected_output = BasicString(output_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_multiline_basic() -> None:
    input_string = r'''"""
Roses are red
Violets are blue"""'''
    output_string = '''"""Roses are red\nViolets are blue"""'''
    actual_output = parse_string(input_string)
    expected_output = MultilineBasicString(output_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_basic_unix_splitline() -> None:
    input_string = '"Roses are red\nViolets are blue"'
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_basic_windows_splitline() -> None:
    input_string = '"Roses are red\r\nViolets are blue"'
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_multiline_escape_one() -> None:
    input_string = r'''"""
The quick brown \


  fox jumps over \
    the lazy dog."""'''
    output_string = '"""The quick brown fox jumps over the lazy dog."""'
    actual_output = parse_string(input_string)
    expected_output = MultilineBasicString(output_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_multiline_escape_two() -> None:
    input_string = r'''"""\
       The quick brown \
       fox jumps over \
       the lazy dog.\
       """'''
    output_string = r'''"""The quick brown fox jumps over the lazy dog."""'''
    actual_output = parse_string(input_string)
    expected_output = MultilineBasicString(output_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_basic_two_quotation_marks() -> None:
    input_string = '"""Here are two quotation marks: "". Simple enough."""'
    actual_output = parse_string(input_string)
    expected_output = MultilineBasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_invalid_string_basic_three_quotation_marks() -> None:
    input_string = '''"""Here are three quotation marks: """."""'''
    with pytest.raises(ValueError):
        BasicString(input_string)

def test_valid_string_basic_three_quotation_marks() -> None:
    input_string = """Here are three quotation marks: ""\"."""
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_string_basic_fifteen_quotation_marks() -> None:
    input_string = """Here are fifteen quotation marks: ""\"""\"""\"""\"""\"."""
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_skipped_string_four_quotation_marks() -> None:
    input_string = '""""This," she said, "is just a pointless statement.""""'
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_basic_one() -> None:
    input_string = r"'C:\Users\nodejs\templates'"
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_basic_two() -> None:
    input_string = r"'\\ServerX\admin$\system32\'"
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_basic_three() -> None:
    input_string = r"""'Tom "Dubs" Preston-Werner'"""
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_basic_four() -> None:
    input_string = r"'<\i\c*\s*>'"
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_basic_regex() -> None:
    input_string = r'''I [dw]on't need \d{2} apples'''
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_multiline_literal() -> None:
    input_string = '''
    The first newline is
    trimmed in raw strings.
    All other whitespace
    is preserved.
    '''
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_fifteen_quotation_marks():
    input_string = '''Here are fifteen quotation marks: """""""""""""""'''
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_invalid_literal_fifteen_apostrophes():
    input_string = """'''Here are fifteen apostrophes: ''''''''''''''''''"""
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_literal_fifteen_apostrophes():
    input_string = "Here are fifteen apostrophes: '''''''''''''''"
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_skipped_string_four_apostrophes():
    input_string= "''''That,' she said, 'is still pointless.''''"
    actual_output = parse_string(input_string)
    expected_output = BasicString(input_string)
    assert actual_output == expected_output
    assert actual_output._raw == input_string

def test_valid_integer_positive() -> None:
    input_integer_string = "+99"
    actual_output = Integer(input_integer_string)
    assert actual_output == 99
    assert actual_output._raw == input_integer_string

def test_valid_integer_no_sign() -> None:
    input_integer_string = "42"
    actual_output = Integer(input_integer_string)
    assert actual_output == 42
    assert actual_output._raw == input_integer_string 

def test_valid_integer_zero() -> None:
    input_integer_string = "0"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0
    assert actual_output._raw == input_integer_string

def test_valid_integer_negative() -> None:
    input_integer_string = "-17"
    actual_output = Integer(input_integer_string)
    assert actual_output == -17
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'int'

def test_valid_integer_one_underscore() -> None:
    input_integer_string = "1_000"
    actual_output = Integer(input_integer_string)
    assert actual_output == 1_000
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'int'

def test_valid_integer_two_underscore() -> None:
    input_integer_string = "5_349_221"
    actual_output = Integer(input_integer_string)
    assert actual_output == 5349221
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'int'

def test_valid_integer_indian_grouping() -> None:
    input_integer_string = "53_49_221"
    actual_output = Integer(input_integer_string)
    assert actual_output == 5349221
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'int'

def test_valid_integer_three_many_underscore() -> None:
    input_integer_string = "1_2_3_4_5"
    actual_output = Integer(input_integer_string)
    assert actual_output == 12345
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'int'

def test_hexidecimal_capital() -> None:
    input_integer_string = "0xDEADBEEF"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0xDEADBEEF
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'hex'

def test_hexidecimal_lower() -> None:
    input_integer_string = "0xdeadbeef"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0xdeadbeef
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'hex'

def test_hexidecimal_lower_with_underscore() -> None:
    input_integer_string = "0xdead_beef"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0xdead_beef
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'hex'

def test_octal_long() -> None:
    input_integer_string = "0o01234567"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0o01234567
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'oct'

def test_octal_short() -> None:
    input_integer_string = "0o755"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0o755
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'oct'

def test_binary() -> None:
    input_integer_string = "0b11010110"
    actual_output = Integer(input_integer_string)
    assert actual_output == 0b11010110
    assert actual_output._raw == input_integer_string
    assert actual_output._type == 'bin'

def test_valid_float_fraction_positive() -> None:
    input_float_string = "+1.0"
    actual_output = Float(input_float_string)
    assert actual_output == 1.0
    assert actual_output._raw == input_float_string

def test_valid_float_fraction_no_sign() -> None:
    input_float_string = "3.1415"
    actual_output = Float(input_float_string)
    assert actual_output == 3.1415
    assert actual_output._raw == input_float_string

def test_valid_float_fraction_negative() -> None:
    input_float_string = "-0.01"
    actual_output = Float(input_float_string)
    assert actual_output == -0.01
    assert actual_output._raw == input_float_string

def test_valid_float_post_exponent_plus() -> None:
    input_float_string = "5e+22"
    actual_output = Float(input_float_string)
    assert actual_output == 5e+22
    assert actual_output._raw == input_float_string

def test_valid_float_post_exponent_no_sign() -> None:
    input_float_string = "1e06" 
    actual_output = Float(input_float_string)
    assert actual_output == 1e06
    assert actual_output._raw == input_float_string

def test_valid_float_post_exponent_minus() -> None:
    input_float_string = "-2E-2"
    actual_output = Float(input_float_string)
    assert actual_output == -2E-2
    assert actual_output._raw == input_float_string

def test_valid_float_fractional_exponent() -> None:
    input_float_string = "6.626e-34"
    actual_output = Float(input_float_string)
    assert actual_output == 6.626e-34
    assert actual_output._raw == input_float_string

def test_invalid_float_no_leading_digit() -> None:
    input_float_string = ".7"
    with pytest.raises(ValueError):
        Float(input_float_string)

def test_invalid_float_no_trailing_digit() -> None:
    input_float_string = "7."
    with pytest.raises(ValueError):
        Float(input_float_string) 

def test_invalid_float_no_trailing_digit_before_exponent() -> None:
    input_float_string = "3.e+20"
    with pytest.raises(ValueError):
        Float(input_float_string)

def test_valid_float_underscore() -> None:
    input_float_string = "224_617.445_991_228"
    actual_output = Float(input_float_string)
    assert actual_output == 224617.445991228
    assert actual_output._raw == input_float_string

def test_valid_float_inf() -> None:
    input_float_string = "inf"
    actual_output = Float(input_float_string)
    assert math.isinf(actual_output) and actual_output > 0
    assert actual_output._raw == input_float_string

def test_valid_float_neg_inf() -> None:
    input_float_string = "-inf"
    actual_output = Float(input_float_string)
    assert math.isinf(actual_output) and actual_output < 0
    assert actual_output._raw == input_float_string

def test_valid_float_pos_inf() -> None:
    input_float_string = "+inf"
    actual_output = Float(input_float_string)
    assert math.isinf(actual_output) and actual_output > 0  
    assert actual_output._raw == input_float_string

def test_valid_float_nan() -> None:
    input_float_string = "nan"
    actual_output = Float(input_float_string)
    assert math.isnan(actual_output)
    assert actual_output._raw == input_float_string

def test_valid_float_neg_nan() -> None:
    input_float_string = "-nan"
    actual_output = Float(input_float_string)
    assert math.isnan(actual_output)
    assert actual_output._raw == input_float_string

def test_valid_float_pos_nan() -> None:
    input_float_string = "+nan"
    actual_output = Float(input_float_string)
    assert math.isnan(actual_output)
    assert actual_output._raw == input_float_string

def test_valid_boolean_true() -> None:
    input_boolean_string = "true"
    actual_output = Boolean(input_boolean_string)
    assert actual_output
    assert actual_output._raw == input_boolean_string

def test_valid_boolean_false() -> None:
    input_boolean_string = "false"
    actual_output = Boolean(input_boolean_string)
    assert not actual_output
    assert actual_output._raw == input_boolean_string

def test_invalid_boolean() -> None:
    input_boolean_string = "invalid"
    with pytest.raises(ValueError):
        Boolean(input_boolean_string)

DATE_TEST_PARAMS = {
    'year' : 1979, 
    'month': 5, 
    'day': 27, 
    'hour': 7, 
    'minute': 32, 
    'second': 0,
}

def test_valid_datetime_with_Z() -> None:
    input_kwargs = DATE_TEST_PARAMS.copy() 
    input_date_time_string = "1979-05-27T07:32:00Z"
    input_kwargs['tzinfo'] = timezone.utc
    input_kwargs['raw'] = input_date_time_string
    actual_output = parse_date_time(input_date_time_string)
    expected_output = DateTime(**input_kwargs)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_datetime_offset() -> None:
    input_kwargs = DATE_TEST_PARAMS.copy() 
    input_date_time_string = "1979-05-27T07:32:00-07:00"
    input_kwargs['tzinfo'] = timezone(timedelta(days=-1, seconds=61200), '-07:00')
    input_kwargs['raw'] = input_date_time_string
    actual_output = parse_date_time(input_date_time_string)
    expected_output = DateTime(**input_kwargs)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_datetime_offset_microseconds() -> None:
    input_kwargs = DATE_TEST_PARAMS.copy() 
    input_date_time_string = "1979-05-27T07:32:00.999999-07:00"
    input_kwargs['tzinfo'] = timezone(timedelta(days=-1, seconds=61200), '-07:00')
    input_kwargs['raw'] = input_date_time_string
    input_kwargs['microsecond'] = 999999
    actual_output = parse_date_time(input_date_time_string)
    expected_output = DateTime(**input_kwargs)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_datetime_space() -> None:
    input_kwargs = DATE_TEST_PARAMS.copy() 
    input_date_time_string = "1979-05-27 07:32:00Z"
    input_kwargs['tzinfo'] = timezone.utc
    input_kwargs['raw'] = input_date_time_string
    actual_output = parse_date_time(input_date_time_string)
    expected_output = DateTime(**input_kwargs)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_local_datetime() -> None:
    input_kwargs = DATE_TEST_PARAMS.copy()
    input_date_time_string = "1979-05-27T07:32:00" 
    input_kwargs['tzinfo'] = timezone.utc
    input_kwargs['raw'] = input_date_time_string
    actual_output = parse_date_time(input_date_time_string)
    expected_output = LocalDateTime(**input_kwargs)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_local_datetime_microseconds() -> None:
    input_kwargs = DATE_TEST_PARAMS.copy()
    input_date_time_string = "1979-05-27T07:32:00.999999"
    input_kwargs['microsecond'] = 999999
    input_kwargs['tzinfo'] = timezone.utc
    input_kwargs['raw'] = input_date_time_string
    actual_output = parse_date_time(input_date_time_string)
    expected_output = LocalDateTime(**input_kwargs)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_local_date() -> None:
    input_date_string = "1979-05-27"
    actual_output = parse_date_time(input_date_string)
    expected_output = LocalDate(year=1979, month=5, day=27, raw=input_date_string)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_local_time() -> None:
    input_time_string = "07:32:00"
    actual_output = parse_date_time(input_time_string)
    expected_output = LocalTime(hour=7, minute=32, second=0, raw=input_time_string)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw

def test_valid_local_time_microseconds() -> None:
    input_time_string = "00:32:00.999999"
    actual_output = parse_date_time(input_time_string)
    expected_output = LocalTime(hour=0, minute=32, second=0, microsecond=999999, raw=input_time_string)
    assert actual_output == expected_output
    assert actual_output._raw == expected_output._raw
